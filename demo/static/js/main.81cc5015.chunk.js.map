{"version":3,"sources":["game/constants.js","game/GameCell.js","game/cell.js","game/Board.js","App.js","serviceWorker.js","index.js"],"names":["CellSize","Colors","name","hex","GameCell","color","x","y","owner","_this","this","Object","classCallCheck","isCurrentCell","curX","curY","X","Y","changeColor","newColor","displayName","concat","isOwnedBy","possibleOwner","Cell","props","possibleConstructorReturn","getPrototypeOf","call","isStartingCell","state","cell","borderSize","borderColor","react_default","a","createElement","className","style","backgroundColor","height","width","border","React","Component","Board","randomColor","Math","floor","random","length","startGame","cells","generateGrid","yIdx","xIdx","setState","currentColor","newCell","findBestMoveHex","excludeColors","colorCounts","filter","c","findIndex","ec","forEach","col","colChanges","alreadyOwned","push","cellIsConnectedNeighbor","changes","bestMove","reduce","prev","current","coordinatesToChange","countNewAcquired","_i","coord","notifyChangedCells","nmh","nextMoveHex","checkY","checkX","noOfCells","toast","info","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","renderGrid","rows","columns","key","cell_Cell","assign","currentCellX","currentCellY","_this2","Container","centered","Grid","verticalAlign","Row","Column","map","Button","onClick","diabled","lib","newestOnTop","rtl","pauseOnVisibilityChange","App","minHeight","Header","as","inverted","Board_Board","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.81cc5015.chunk.js","sourcesContent":["export const CellSize = 1.5;\nexport const Colors = [\n  { name: 'red', hex: '#C70039' },\n  { name: 'yellow', hex: '#FFC300' },\n  { name: 'white', hex: '#DEECEE' },\n  { name: 'green', hex: '#0BB02C' },\n  { name: 'cyan', hex: '#10ECF3' },\n  { name: 'blue', hex: '#103DF3' },\n  { name: 'purple', hex: '#F310D4' },\n];\n","export default class GameCell {\n  constructor(color, x, y, owner) {\n    this.color = color;\n    this.X = x;\n    this.Y = y;\n    this.owner = owner;\n  }\n\n  isCurrentCell = (curX, curY) => {\n    return this.X === curX && this.Y === curY;\n  };\n\n  changeColor = newColor => {\n    if (this.color.hex !== newColor.hex) {\n      this.color = newColor;\n    }\n  };\n\n  displayName = () => {\n    return `{X:${this.X}, Y:${this.Y}, Owner: ${this.owner}, Color: ${this.color.name}}`;\n  };\n\n  isOwnedBy = possibleOwner => {\n    return this.owner && this.owner === possibleOwner;\n  }\n}\n","import React from 'react';\nimport { CellSize } from './constants';\nimport GameCell from './GameCell';\n\nexport default class Cell extends React.Component {\n  constructor(props) {\n    super(props);\n    // props: curX, curY, color {name, hex}\n    this.state = {\n      cell: props.cell,\n    };\n  }\n\n  isStartingCell = () => {\n    return this.state.cell.isCurrentCell(0, 0);\n  };\n\n  render() {\n    const borderSize = this.isStartingCell() ? '3px' : '1px';\n    const borderColor = this.isStartingCell() ? '#C0A3B5' : 'grey';\n\n    return (\n      <div\n        className=\"cell\"\n        style={{\n          backgroundColor: this.state.cell.color.hex,\n          height: `${CellSize}rem`,\n          width: `${CellSize}rem`,\n          border: `${borderSize} groove ${borderColor}`,\n        }}\n      />\n    );\n  }\n}\n","import React from 'react';\nimport { Button, Container, Grid } from 'semantic-ui-react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport { CellSize, Colors } from './constants';\nimport Cell from './cell';\nimport GameCell from './GameCell';\n\nexport default class Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      height: props.height * CellSize,\n      width: props.width * CellSize,\n      // remove? does not change for player. need for player 1 and 2 sep.\n      currentCellX: 0,\n      currentCellY: 0,\n      currentColor: null,\n      nextMoveHex: '',\n    };\n  }\n\n  componentDidMount() {\n    this.startGame(this.props.width, this.props.height);\n  }\n\n  randomColor = () => {\n    const randColor = Colors[Math.floor(Math.random() * Colors.length)];\n    return randColor;\n  };\n\n  startGame = (width, height) => {\n    this.cells = [];\n    this.generateGrid(width, height);\n  };\n\n  generateGrid = (width, height) => {\n    for (let yIdx = 0; yIdx <= height; yIdx++) {\n      for (let xIdx = 0; xIdx <= width; xIdx++) {\n        if (typeof this.cells[yIdx] === 'undefined') {\n          this.cells[yIdx] = [];\n        }\n        const color = this.randomColor();\n        if (yIdx === 0 && xIdx === 0) {\n          this.setState({ currentColor: color });\n        }\n        const newCell = new GameCell(\n          color,\n          xIdx,\n          yIdx,\n          yIdx === 0 && xIdx === 0 ? 'p1' : ''\n        );\n        this.cells[yIdx][xIdx] = newCell;\n      }\n    }\n  };\n\n  findBestMoveHex = (excludeColors) => {\n    const colorCounts = [];\n    Colors.filter(c => excludeColors.findIndex(ec => ec.hex === c.hex) < 0).forEach(col => {\n      const colChanges = [];\n      const alreadyOwned = [];\n      // fill already owned first\n      for (let yIdx = 0; yIdx <= this.props.height; yIdx++) {\n        for (let xIdx = 0; xIdx <= this.props.width; xIdx++) {\n          if (this.cells[yIdx][xIdx].isOwnedBy('p1')) {\n            alreadyOwned.push({ x: xIdx, y: yIdx });\n          }\n        }\n      }\n      // find new cells to acquire\n      for (let yIdx = 0; yIdx <= this.props.height; yIdx++) {\n        for (let xIdx = 0; xIdx <= this.props.width; xIdx++) {\n          if (this.cellIsConnectedNeighbor(xIdx, yIdx, col, [...alreadyOwned, ...colChanges])) {\n            colChanges.push({ x: xIdx, y: yIdx });\n          }\n        }\n      }\n      colorCounts.push({\n        color: col.hex,\n        changes: colChanges.length,\n      });\n    });\n    const bestMove = colorCounts.reduce((prev, current) => {\n      return prev.changes > current.changes ? prev : current;\n    });\n    return bestMove ? bestMove.color : '';\n  };\n\n  changeColor = newColor => {\n    const coordinatesToChange = [];\n    let countNewAcquired = 0;\n    if (this.state.currentColor.hex !== newColor.hex) {\n      // get all connected cells with old color and change to new\n      for (let yIdx = 0; yIdx <= this.props.height; yIdx++) {\n        for (let xIdx = 0; xIdx <= this.props.width; xIdx++) {\n          const cell = this.cells[yIdx][xIdx];\n          // first, always change\n          if (yIdx === 0 && xIdx === 0) {\n            coordinatesToChange.push({ x: xIdx, y: yIdx });\n            continue;\n          }\n          // always change already owned\n          if (cell.owner.length > 0) {\n            coordinatesToChange.push({ x: xIdx, y: yIdx });\n            continue;\n          }\n          // if connected neighbor with new color exists\n          if (\n            this.cellIsConnectedNeighbor(\n              xIdx,\n              yIdx,\n              newColor,\n              coordinatesToChange\n            )\n          ) {\n            countNewAcquired++;\n            coordinatesToChange.push({ x: xIdx, y: yIdx });\n            continue;\n          }\n        }\n      }\n      for (const coord of coordinatesToChange) {\n        const cell = this.cells[coord.y][coord.x];\n        cell.color = newColor;\n        cell.owner = 'p1';\n      }\n      this.notifyChangedCells(countNewAcquired);\n      const nmh = this.findBestMoveHex([newColor]);\n      this.setState({\n        currentColor: newColor,\n        nextMoveHex: nmh,\n      });\n    }\n  };\n\n  cellIsConnectedNeighbor = (x, y, newColor, changes) => {\n    const theCell = this.cells[y][x];\n    if (theCell.color.hex !== newColor.hex) {\n      return false;\n    }\n    // check left neighbor within boundaries\n    if (x - 1 >= 0) {\n      const checkY = y;\n      const checkX = x - 1;\n      const checkCell = this.cells[checkY][checkX];\n      // console.log(`N-LEFT: Checking ${checkCell.displayName()}`);\n      if (\n        checkCell.isOwnedBy('p1') ||\n        changes.findIndex(c => c.x === checkX && c.y === checkY) >= 0\n      ) {\n        // console.log(`N-LEFT: ${theCell.displayName()}`);\n        return true;\n      }\n    }\n    // check right neighbor within boundaries\n    if (x + 1 <= this.props.width) {\n      const checkY = y;\n      const checkX = x + 1;\n      const checkCell = this.cells[checkY][checkX];\n      // console.log(`N-RIGHT: Checking ${checkCell.displayName()}`);\n      if (\n        checkCell.isOwnedBy('p1') ||\n        changes.findIndex(c => c.x === checkX && c.y === checkY) >= 0\n      ) {\n        // console.log(`N-RIGHT: ${theCell.displayName()}`)\n        return true;\n      }\n    }\n    // check top neighbor within boundaries\n    if (y - 1 >= 0) {\n      const checkY = y - 1;\n      const checkX = x;\n      const checkCell = this.cells[checkY][checkX];\n      // console.log(`N-TOP: Checking ${checkCell.displayName()}`);\n      if (\n        checkCell.isOwnedBy('p1') ||\n        changes.findIndex(c => c.x === checkX && c.y === checkY) >= 0\n      ) {\n        // console.log(`N-TOP: ${theCell.displayName()}`)\n        return true;\n      }\n    }\n    // check bottom neighbor within boundaries\n    if (y + 1 <= this.props.height) {\n      const checkY = y + 1;\n      const checkX = x;\n      const checkCell = this.cells[checkY][checkX];\n      // console.log(`N-BOTTOM: Checking ${checkCell.displayName()}`);\n      if (\n        checkCell.isOwnedBy('p1') ||\n        changes.findIndex(c => c.x === checkX && c.y === checkY) >= 0\n      ) {\n        // console.log(`N-BOTTOM: ${theCell.displayName()}`)\n        return true;\n      }\n    }\n    return false;\n  };\n\n  notifyChangedCells = noOfCells =>\n    toast.info(`${noOfCells} !`, {\n      position: 'bottom-center',\n      autoClose: 1000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n    });\n\n  renderGrid = () => {\n    const rows = [];\n    if (!this.cells || this.cells.length === 0) {\n      return rows;\n    }\n    for (let yIdx = 0; yIdx <= this.props.height; yIdx++) {\n      const columns = [];\n      for (let xIdx = 0; xIdx <= this.props.width; xIdx++) {\n        const cell = this.cells[yIdx][xIdx];\n        columns.push(\n          <td key={`x_${xIdx}`}>\n            <Cell\n              {...this.props}\n              cell={cell}\n              curX={this.state.currentCellX}\n              curY={this.state.currentCellY}\n            />\n          </td>\n        );\n      }\n      rows.push(<tr key={`y_${yIdx}`}>{columns}</tr>);\n    }\n    return rows;\n  };\n\n  render() {\n    return (\n      <Container centered>\n        <Grid centered columns={3} verticalAlign=\"middle\">\n          <Grid.Row verticalAlign=\"middle\">\n            <Grid.Column>\n              <Grid centered verticalAlign=\"middle\">\n                <div className=\"board\">\n                  <table>\n                    <tbody>{this.renderGrid()}</tbody>\n                  </table>\n                </div>\n              </Grid>\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Row centered columns={Colors.length + 8}>\n            {Colors.map(col => (\n              <Grid.Column key={col.name}>\n                <Button\n                  style={{\n                    backgroundColor:\n                      this.state.currentColor &&\n                      this.state.currentColor.hex === col.hex\n                        ? 'grey'\n                        : col.hex,\n                    border:\n                      this.state.nextMoveHex &&\n                      this.state.nextMoveHex === col.hex\n                        ? '3px solid #785807'\n                        : 'none',\n                  }}\n                  onClick={() => this.changeColor(col)}\n                  diabled={\n                    this.state.currentColor &&\n                    this.state.currentColor.hex === col.hex\n                  }>\n                  &nbsp;\n                </Button>\n              </Grid.Column>\n            ))}\n          </Grid.Row>\n        </Grid>\n        <ToastContainer\n          position=\"bottom-center\"\n          autoClose={1000}\n          hideProgressBar={false}\n          newestOnTop\n          closeOnClick\n          rtl={false}\n          pauseOnVisibilityChange\n          draggable\n          pauseOnHover\n        />\n      </Container>\n    );\n  }\n}\n","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Board from './game/Board';\nimport { Button, Container, Grid, Header } from 'semantic-ui-react';\nimport { Colors } from './game/constants';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App-header' style={{minHeight: '100vh'}}>\n      <Header as='h2' inverted>Filler by Robin</Header>\n      <Board height={20} width={20} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}