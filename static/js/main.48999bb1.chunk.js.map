{"version":3,"sources":["game/constants.js","game/GameCell.js","game/cell.js","game/Board.js","App.js","serviceWorker.js","index.js"],"names":["CellSize","Colors","name","hex","GameCell","color","x","y","owner","_this","this","Object","classCallCheck","isCurrentCell","curX","curY","X","Y","changeColor","newColor","displayName","concat","isOwnedBy","possibleOwner","Cell","props","possibleConstructorReturn","getPrototypeOf","call","isStartingCell","state","cell","borderSize","borderColor","react_default","a","createElement","className","style","backgroundColor","height","width","border","React","Component","Board","randomColor","Math","floor","random","length","startGame","cells","generateGrid","yIdx","xIdx","setState","currentColor","newCell","findBestMoveHex","excludeColors","colorCounts","filter","c","findIndex","ec","forEach","col","colChanges","alreadyOwned","push","cellIsConnectedNeighbor","changes","bestMove","reduce","prev","current","coordinatesToChange","countNewAcquired","_i","coord","notifyChangedCells","nmh","nextMoveHex","checkY","checkX","noOfCells","toast","info","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","renderGrid","rows","columns","key","cell_Cell","assign","currentCellX","currentCellY","_this2","Container","centered","Grid","verticalAlign","Row","Column","map","Button","onClick","diabled","lib","newestOnTop","rtl","pauseOnVisibilityChange","App","minHeight","Header","as","inverted","Board_Board","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.48999bb1.chunk.js","sourcesContent":["export const CellSize = 1.5;\r\nexport const Colors = [\r\n  { name: 'red', hex: '#C70039' },\r\n  { name: 'yellow', hex: '#FFC300' },\r\n  { name: 'white', hex: '#DEECEE' },\r\n  { name: 'green', hex: '#0BB02C' },\r\n  { name: 'cyan', hex: '#10ECF3' },\r\n  { name: 'blue', hex: '#103DF3' },\r\n  { name: 'purple', hex: '#F310D4' },\r\n];\r\n","export default class GameCell {\r\n  constructor(color, x, y, owner) {\r\n    this.color = color;\r\n    this.X = x;\r\n    this.Y = y;\r\n    this.owner = owner;\r\n  }\r\n\r\n  isCurrentCell = (curX, curY) => {\r\n    return this.X === curX && this.Y === curY;\r\n  };\r\n\r\n  changeColor = newColor => {\r\n    if (this.color.hex !== newColor.hex) {\r\n      this.color = newColor;\r\n    }\r\n  };\r\n\r\n  displayName = () => {\r\n    return `{X:${this.X}, Y:${this.Y}, Owner: ${this.owner}, Color: ${this.color.name}}`;\r\n  };\r\n\r\n  isOwnedBy = possibleOwner => {\r\n    return this.owner && this.owner === possibleOwner;\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { CellSize } from './constants';\r\nimport GameCell from './GameCell';\r\n\r\nexport default class Cell extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    // props: curX, curY, color {name, hex}\r\n    this.state = {\r\n      cell: props.cell,\r\n    };\r\n  }\r\n\r\n  isStartingCell = () => {\r\n    return this.state.cell.isCurrentCell(0, 0);\r\n  };\r\n\r\n  render() {\r\n    const borderSize = this.isStartingCell() ? '3px' : '1px';\r\n    const borderColor = this.isStartingCell() ? '#C0A3B5' : 'grey';\r\n\r\n    return (\r\n      <div\r\n        className=\"cell\"\r\n        style={{\r\n          backgroundColor: this.state.cell.color.hex,\r\n          height: `${CellSize}rem`,\r\n          width: `${CellSize}rem`,\r\n          border: `${borderSize} groove ${borderColor}`,\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { Button, Container, Grid } from 'semantic-ui-react';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport { CellSize, Colors } from './constants';\r\nimport Cell from './cell';\r\nimport GameCell from './GameCell';\r\n\r\nexport default class Board extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      height: props.height * CellSize,\r\n      width: props.width * CellSize,\r\n      // remove? does not change for player. need for player 1 and 2 sep.\r\n      currentCellX: 0,\r\n      currentCellY: 0,\r\n      currentColor: null,\r\n      nextMoveHex: '',\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.startGame(this.props.width, this.props.height);\r\n  }\r\n\r\n  randomColor = () => {\r\n    const randColor = Colors[Math.floor(Math.random() * Colors.length)];\r\n    return randColor;\r\n  };\r\n\r\n  startGame = (width, height) => {\r\n    this.cells = [];\r\n    this.generateGrid(width, height);\r\n  };\r\n\r\n  generateGrid = (width, height) => {\r\n    for (let yIdx = 0; yIdx <= height; yIdx++) {\r\n      for (let xIdx = 0; xIdx <= width; xIdx++) {\r\n        if (typeof this.cells[yIdx] === 'undefined') {\r\n          this.cells[yIdx] = [];\r\n        }\r\n        const color = this.randomColor();\r\n        if (yIdx === 0 && xIdx === 0) {\r\n          this.setState({ currentColor: color });\r\n        }\r\n        const newCell = new GameCell(\r\n          color,\r\n          xIdx,\r\n          yIdx,\r\n          yIdx === 0 && xIdx === 0 ? 'p1' : ''\r\n        );\r\n        this.cells[yIdx][xIdx] = newCell;\r\n      }\r\n    }\r\n  };\r\n\r\n  findBestMoveHex = (excludeColors) => {\r\n    const colorCounts = [];\r\n    Colors.filter(c => excludeColors.findIndex(ec => ec.hex === c.hex) < 0).forEach(col => {\r\n      const colChanges = [];\r\n      const alreadyOwned = [];\r\n      // fill already owned first\r\n      for (let yIdx = 0; yIdx <= this.props.height; yIdx++) {\r\n        for (let xIdx = 0; xIdx <= this.props.width; xIdx++) {\r\n          if (this.cells[yIdx][xIdx].isOwnedBy('p1')) {\r\n            alreadyOwned.push({ x: xIdx, y: yIdx });\r\n          }\r\n        }\r\n      }\r\n      // find new cells to acquire\r\n      for (let yIdx = 0; yIdx <= this.props.height; yIdx++) {\r\n        for (let xIdx = 0; xIdx <= this.props.width; xIdx++) {\r\n          if (this.cellIsConnectedNeighbor(xIdx, yIdx, col, [...alreadyOwned, ...colChanges])) {\r\n            colChanges.push({ x: xIdx, y: yIdx });\r\n          }\r\n        }\r\n      }\r\n      colorCounts.push({\r\n        color: col.hex,\r\n        changes: colChanges.length,\r\n      });\r\n    });\r\n    const bestMove = colorCounts.reduce((prev, current) => {\r\n      return prev.changes > current.changes ? prev : current;\r\n    });\r\n    return bestMove ? bestMove.color : '';\r\n  };\r\n\r\n  changeColor = newColor => {\r\n    const coordinatesToChange = [];\r\n    let countNewAcquired = 0;\r\n    if (this.state.currentColor.hex !== newColor.hex) {\r\n      // get all connected cells with old color and change to new\r\n      for (let yIdx = 0; yIdx <= this.props.height; yIdx++) {\r\n        for (let xIdx = 0; xIdx <= this.props.width; xIdx++) {\r\n          const cell = this.cells[yIdx][xIdx];\r\n          // first, always change\r\n          if (yIdx === 0 && xIdx === 0) {\r\n            coordinatesToChange.push({ x: xIdx, y: yIdx });\r\n            continue;\r\n          }\r\n          // always change already owned\r\n          if (cell.owner.length > 0) {\r\n            coordinatesToChange.push({ x: xIdx, y: yIdx });\r\n            continue;\r\n          }\r\n          // if connected neighbor with new color exists\r\n          if (\r\n            this.cellIsConnectedNeighbor(\r\n              xIdx,\r\n              yIdx,\r\n              newColor,\r\n              coordinatesToChange\r\n            )\r\n          ) {\r\n            countNewAcquired++;\r\n            coordinatesToChange.push({ x: xIdx, y: yIdx });\r\n            continue;\r\n          }\r\n        }\r\n      }\r\n      for (const coord of coordinatesToChange) {\r\n        const cell = this.cells[coord.y][coord.x];\r\n        cell.color = newColor;\r\n        cell.owner = 'p1';\r\n      }\r\n      this.notifyChangedCells(countNewAcquired);\r\n      const nmh = this.findBestMoveHex([newColor]);\r\n      this.setState({\r\n        currentColor: newColor,\r\n        nextMoveHex: nmh,\r\n      });\r\n    }\r\n  };\r\n\r\n  cellIsConnectedNeighbor = (x, y, newColor, changes) => {\r\n    const theCell = this.cells[y][x];\r\n    if (theCell.color.hex !== newColor.hex) {\r\n      return false;\r\n    }\r\n    // check left neighbor within boundaries\r\n    if (x - 1 >= 0) {\r\n      const checkY = y;\r\n      const checkX = x - 1;\r\n      const checkCell = this.cells[checkY][checkX];\r\n      // console.log(`N-LEFT: Checking ${checkCell.displayName()}`);\r\n      if (\r\n        checkCell.isOwnedBy('p1') ||\r\n        changes.findIndex(c => c.x === checkX && c.y === checkY) >= 0\r\n      ) {\r\n        // console.log(`N-LEFT: ${theCell.displayName()}`);\r\n        return true;\r\n      }\r\n    }\r\n    // check right neighbor within boundaries\r\n    if (x + 1 <= this.props.width) {\r\n      const checkY = y;\r\n      const checkX = x + 1;\r\n      const checkCell = this.cells[checkY][checkX];\r\n      // console.log(`N-RIGHT: Checking ${checkCell.displayName()}`);\r\n      if (\r\n        checkCell.isOwnedBy('p1') ||\r\n        changes.findIndex(c => c.x === checkX && c.y === checkY) >= 0\r\n      ) {\r\n        // console.log(`N-RIGHT: ${theCell.displayName()}`)\r\n        return true;\r\n      }\r\n    }\r\n    // check top neighbor within boundaries\r\n    if (y - 1 >= 0) {\r\n      const checkY = y - 1;\r\n      const checkX = x;\r\n      const checkCell = this.cells[checkY][checkX];\r\n      // console.log(`N-TOP: Checking ${checkCell.displayName()}`);\r\n      if (\r\n        checkCell.isOwnedBy('p1') ||\r\n        changes.findIndex(c => c.x === checkX && c.y === checkY) >= 0\r\n      ) {\r\n        // console.log(`N-TOP: ${theCell.displayName()}`)\r\n        return true;\r\n      }\r\n    }\r\n    // check bottom neighbor within boundaries\r\n    if (y + 1 <= this.props.height) {\r\n      const checkY = y + 1;\r\n      const checkX = x;\r\n      const checkCell = this.cells[checkY][checkX];\r\n      // console.log(`N-BOTTOM: Checking ${checkCell.displayName()}`);\r\n      if (\r\n        checkCell.isOwnedBy('p1') ||\r\n        changes.findIndex(c => c.x === checkX && c.y === checkY) >= 0\r\n      ) {\r\n        // console.log(`N-BOTTOM: ${theCell.displayName()}`)\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  };\r\n\r\n  notifyChangedCells = noOfCells =>\r\n    toast.info(`${noOfCells} !`, {\r\n      position: 'bottom-center',\r\n      autoClose: 1000,\r\n      hideProgressBar: false,\r\n      closeOnClick: true,\r\n      pauseOnHover: true,\r\n      draggable: true,\r\n    });\r\n\r\n  renderGrid = () => {\r\n    const rows = [];\r\n    if (!this.cells || this.cells.length === 0) {\r\n      return rows;\r\n    }\r\n    for (let yIdx = 0; yIdx <= this.props.height; yIdx++) {\r\n      const columns = [];\r\n      for (let xIdx = 0; xIdx <= this.props.width; xIdx++) {\r\n        const cell = this.cells[yIdx][xIdx];\r\n        columns.push(\r\n          <td key={`x_${xIdx}`}>\r\n            <Cell\r\n              {...this.props}\r\n              cell={cell}\r\n              curX={this.state.currentCellX}\r\n              curY={this.state.currentCellY}\r\n            />\r\n          </td>\r\n        );\r\n      }\r\n      rows.push(<tr key={`y_${yIdx}`}>{columns}</tr>);\r\n    }\r\n    return rows;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Container centered>\r\n        <Grid centered columns={3} verticalAlign=\"middle\">\r\n          <Grid.Row verticalAlign=\"middle\">\r\n            <Grid.Column>\r\n              <Grid centered verticalAlign=\"middle\">\r\n                <div className=\"board\">\r\n                  <table>\r\n                    <tbody>{this.renderGrid()}</tbody>\r\n                  </table>\r\n                </div>\r\n              </Grid>\r\n            </Grid.Column>\r\n          </Grid.Row>\r\n          <Grid.Row centered columns={Colors.length + 8}>\r\n            {Colors.map(col => (\r\n              <Grid.Column key={col.name}>\r\n                <Button\r\n                  style={{\r\n                    backgroundColor:\r\n                      this.state.currentColor &&\r\n                      this.state.currentColor.hex === col.hex\r\n                        ? 'grey'\r\n                        : col.hex,\r\n                    border:\r\n                      this.state.nextMoveHex &&\r\n                      this.state.nextMoveHex === col.hex\r\n                        ? '3px solid #785807'\r\n                        : 'none',\r\n                  }}\r\n                  onClick={() => this.changeColor(col)}\r\n                  diabled={\r\n                    this.state.currentColor &&\r\n                    this.state.currentColor.hex === col.hex\r\n                  }>\r\n                  &nbsp;\r\n                </Button>\r\n              </Grid.Column>\r\n            ))}\r\n          </Grid.Row>\r\n        </Grid>\r\n        <ToastContainer\r\n          position=\"bottom-center\"\r\n          autoClose={1000}\r\n          hideProgressBar={false}\r\n          newestOnTop\r\n          closeOnClick\r\n          rtl={false}\r\n          pauseOnVisibilityChange\r\n          draggable\r\n          pauseOnHover\r\n        />\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\n// import logo from './logo.svg';\r\nimport './App.css';\r\nimport Board from './game/Board';\r\nimport { Button, Container, Grid, Header } from 'semantic-ui-react';\r\nimport { Colors } from './game/constants';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className='App-header' style={{minHeight: '100vh'}}>\r\n      <Header as='h2' inverted>Filler by Robin</Header>\r\n      <Board height={20} width={20} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport 'react-toastify/dist/ReactToastify.min.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}