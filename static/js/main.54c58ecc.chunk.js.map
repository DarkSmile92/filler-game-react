{"version":3,"sources":["game/constants.js","game/cell.js","game/GameCell.js","game/Board.js","App.js","serviceWorker.js","index.js"],"names":["CellSize","Colors","name","hex","Player1","Player2","Cell","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","isStartingCell","state","cell","isCurrentCell","calcBorderSize","xmax","ymax","calcBorderColor","XMax","YMax","borderSize","borderColor","icon","react_default","a","createElement","iconStyle","fontSize","owner","Icon","style","className","backgroundColor","color","height","concat","width","border","textAlign","display","ownerDisplay","React","Component","GameCell","x","y","curX","curY","X","Y","changeColor","newColor","displayName","isOwnedBy","possibleOwner","buildStat","pct","Statistic","horizontal","inverted","size","Value","toFixed","Label","calcPct","partial","total","Board","randomColor","Math","floor","random","length","reset","emptyCol","setState","cells","currentColorP1","currentColorP2","currentPlayer","completeP1","completeP2","nextMove","cnt","won","wonName","generateGrid","startGame","yIdx","xIdx","currentColor","newCell","findBestMoveHex","excludeColors","player","colorCounts","filter","c","findIndex","ec","forEach","col","colChanges","alreadyOwned","push","cellIsConnectedNeighbor","changes","bestMove","reduce","prev","current","updateStatsForPlayer","ocs","findNewCells","countNewAcquired","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","coord","value","err","return","notifyChangedCells","excludeColorsSearch","nmh","alreadyFound","foundChanges","currentPlayerColor","_loop","_loop2","af","_loop3","_loop4","theCell","checkY","checkX","debug","console","log","noOfCells","toast","info","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","renderWinnerGrid","alignItems","justifyContent","renderGrid","rows","columns","key","cell_Cell","assign","displayOwner","toggleDisplayOwner","toggleDisplayPoss","displayPoss","_this2","Container","centered","Grid","verticalAlign","Row","Column","map","Button","onClick","diabled","relaxed","Segment","Checkbox","label","toggle","onChange","lib","newestOnTop","rtl","pauseOnVisibilityChange","App","minHeight","Header","as","Board_Board","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.54c58ecc.chunk.js","sourcesContent":["export const CellSize = 1.5;\nexport const Colors = [\n  { name: 'red', hex: '#C70039' },\n  { name: 'yellow', hex: '#FFC300' },\n  { name: 'white', hex: '#DEECEE' },\n  { name: 'green', hex: '#0BB02C' },\n  { name: 'cyan', hex: '#10ECF3' },\n  { name: 'blue', hex: '#103DF3' },\n  { name: 'purple', hex: '#F310D4' },\n];\nexport const Player1 = 'p1';\nexport const Player2 = 'p2';\n","import React from 'react';\nimport { Icon } from 'semantic-ui-react';\nimport { CellSize, Player1, Player2 } from './constants';\n\nexport default class Cell extends React.Component {\n  constructor(props) {\n    super(props);\n    // props: curX, curY, color {name, hex}\n    this.state = {\n      cell: props.cell,\n      xmax: props.XMax,\n      ymax: props.YMax,\n    };\n  }\n\n  isStartingCell = () => {\n    return this.state.cell.isCurrentCell(0, 0);\n  };\n\n  calcBorderSize = () => {\n    if (\n      this.state.cell.isCurrentCell(0, 0) ||\n      this.state.cell.isCurrentCell(this.state.xmax, this.state.ymax)\n    ) {\n      return '3px';\n    }\n    return '1px';\n  };\n\n  calcBorderColor = () => {\n    if (this.state.cell.isCurrentCell(0, 0)) {\n      return '#C0A3B5';\n    }\n    if (this.state.cell.isCurrentCell(this.state.xmax, this.state.ymax)) {\n      return '#A3C0AE';\n    }\n    return 'grey';\n  };\n\n  render() {\n    const borderSize = this.calcBorderSize();\n    const borderColor = this.calcBorderColor();\n    let icon = <span />;\n    const iconStyle = { fontSize: '50%' };\n\n    if (this.state.cell) {\n      switch (this.state.cell.owner) {\n        case Player1:\n          icon = <Icon name=\"fly\" style={iconStyle} />;\n          break;\n        case Player2:\n          icon = <Icon name=\"sun\" style={iconStyle} />;\n          break;\n      }\n    }\n\n    return (\n      <div\n        className=\"cell\"\n        style={{\n          backgroundColor: this.state.cell.color.hex,\n          height: `${CellSize}rem`,\n          width: `${CellSize}rem`,\n          border: `${borderSize} groove ${borderColor}`,\n          textAlign: 'center',\n          display: 'flex',\n        }}>\n        {this.props.ownerDisplay && icon}\n      </div>\n    );\n  }\n}\n","export default class GameCell {\n  constructor(color, x, y, owner) {\n    this.color = color;\n    this.X = x;\n    this.Y = y;\n    this.owner = owner;\n  }\n\n  isCurrentCell = (curX, curY) => {\n    return this.X === curX && this.Y === curY;\n  };\n\n  changeColor = newColor => {\n    if (this.color.hex !== newColor.hex) {\n      this.color = newColor;\n    }\n  };\n\n  displayName = () => {\n    return `{X:${this.X}, Y:${this.Y}, Owner: ${this.owner}, Color: ${this.color.name}}`;\n  };\n\n  isOwnedBy = possibleOwner => {\n    return this.owner && this.owner === possibleOwner;\n  }\n}\n","import React from 'react';\nimport {\n  Button,\n  Container,\n  Checkbox,\n  Icon,\n  Grid,\n  Statistic,\n  Segment,\n} from 'semantic-ui-react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport { CellSize, Colors, Player1, Player2 } from './constants';\nimport Cell from './cell';\nimport GameCell from './GameCell';\nimport { codeBlock } from 'common-tags';\n\nconst buildStat = pct => (\n  <Statistic horizontal inverted size=\"mini\">\n    <Statistic.Value>{pct.toFixed(2)}</Statistic.Value>\n    <Statistic.Label>%</Statistic.Label>\n  </Statistic>\n);\n\nconst calcPct = (partial, total) => (partial * 100) / total;\n\nexport default class Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      height: props.height * CellSize,\n      width: props.width * CellSize,\n      currentColorP1: { name: 'empty', hex: '0' },\n      currentColorP2: { name: 'empty', hex: '0' },\n      currentPlayer: Player1,\n      completeP1: 0,\n      completeP2: 0,\n      nextMove: { hex: '0', cnt: 0 },\n      won: false,\n      wonName: '',\n      displayOwner: false,\n      displayPoss: false,\n      debug: false,\n    };\n  }\n\n  componentDidMount() {\n    this.startGame(this.props.width, this.props.height);\n  }\n\n  randomColor = () => {\n    const randColor = Colors[Math.floor(Math.random() * Colors.length)];\n    return randColor;\n  };\n\n  reset = (width, height) => {\n    const emptyCol = { name: 'empty', hex: '0' };\n    this.setState({\n      cells: [],\n      currentColorP1: emptyCol,\n      currentColorP2: emptyCol,\n      currentPlayer: Player1,\n      completeP1: 0,\n      completeP2: 0,\n      nextMove: { hex: '0', cnt: 0 },\n      won: false,\n      wonName: '',\n    }, () => this.generateGrid(width, height));\n  };\n\n  startGame = (width, height) => {\n    this.reset(width, height);\n  };\n\n  generateGrid = (width, height) => {\n    for (let yIdx = 0; yIdx <= height; yIdx++) {\n      for (let xIdx = 0; xIdx <= width; xIdx++) {\n        if (typeof this.state.cells[yIdx] === 'undefined') {\n          this.state.cells[yIdx] = [];\n        }\n        const color = this.randomColor();\n        if (yIdx === 0 && xIdx === 0) {\n          this.setState({ currentColor: color, currentColorP1: color });\n        }\n        if (yIdx === height && xIdx === width) {\n          while (color.hex === this.state.currentColorP1) {\n            color = this.randomColor();\n          }\n          this.setState({ currentColorP2: color });\n        }\n        const newCell = new GameCell(\n          color,\n          xIdx,\n          yIdx,\n          yIdx === 0 && xIdx === 0\n            ? Player1\n            : yIdx === height && xIdx === width\n            ? Player2\n            : ''\n        );\n        this.state.cells[yIdx][xIdx] = newCell;\n      }\n    }\n  };\n\n  findBestMoveHex = (excludeColors, player) => {\n    const colorCounts = [];\n    Colors.filter(\n      c => excludeColors.findIndex(ec => ec.hex === c.hex) < 0\n    ).forEach(col => {\n      const colChanges = [];\n      const alreadyOwned = [];\n      // fill already owned first\n      for (let yIdx = 0; yIdx <= this.props.height; yIdx++) {\n        for (let xIdx = 0; xIdx <= this.props.width; xIdx++) {\n          if (this.state.cells[yIdx][xIdx].isOwnedBy(player)) {\n            alreadyOwned.push({ x: xIdx, y: yIdx });\n          }\n        }\n      }\n      // find new cells to acquire\n      // p1 == start 0, p2 == start end\n      // ToDo: Improve this!\n      if (player === Player1) {\n        for (let yIdx = 0; yIdx <= this.props.height; yIdx++) {\n          for (let xIdx = 0; xIdx <= this.props.width; xIdx++) {\n            if (\n              this.cellIsConnectedNeighbor(\n                xIdx,\n                yIdx,\n                col,\n                [...alreadyOwned, ...colChanges],\n                player\n              )\n            ) {\n              colChanges.push({ x: xIdx, y: yIdx });\n            }\n          }\n        }\n      } else {\n        for (let yIdx = this.props.height; yIdx >= 0; yIdx--) {\n          for (let xIdx = this.props.width; xIdx >= 0; xIdx--) {\n            if (\n              this.cellIsConnectedNeighbor(\n                xIdx,\n                yIdx,\n                col,\n                [...alreadyOwned, ...colChanges],\n                player\n              )\n            ) {\n              colChanges.push({ x: xIdx, y: yIdx });\n            }\n          }\n        }\n      }\n\n      colorCounts.push({\n        color: col.hex,\n        changes: colChanges.length,\n      });\n    });\n    const bestMove = colorCounts.reduce((prev, current) => {\n      return prev.changes > current.changes ? prev : current;\n    });\n    return bestMove\n      ? { hex: bestMove.color, cnt: bestMove.changes }\n      : { hex: '0', cnt: 0 };\n  };\n\n  updateStatsForPlayer = player => {\n    let ocs = 0;\n    for (let yIdx = 0; yIdx <= this.props.height; yIdx++) {\n      for (let xIdx = 0; xIdx <= this.props.width; xIdx++) {\n        if (this.state.cells[yIdx][xIdx].isOwnedBy(player)) {\n          ocs++;\n        }\n      }\n    }\n    const pct = calcPct(ocs, this.props.height * this.props.width);\n\n    this.setState({\n      completeP1: player === Player1 ? pct : this.state.completeP1,\n      completeP2: player === Player2 ? pct : this.state.completeP2,\n      won: pct >= 50 ? true : false,\n      wonName: pct >= 50 ? player : '',\n    });\n  };\n\n  changeColor = newColor => {\n    const currentPlayer = this.state.currentPlayer;\n\n    const changes = this.findNewCells(newColor, currentPlayer, []);\n    let countNewAcquired = 0;\n    for (const coord of changes) {\n      const cell = this.state.cells[coord.y][coord.x];\n      if (!cell.isOwnedBy(currentPlayer)) {\n        countNewAcquired++;\n      }\n      cell.color = newColor;\n      cell.owner = currentPlayer;\n    }\n    this.updateStatsForPlayer(currentPlayer);\n    this.notifyChangedCells(countNewAcquired);\n    // exclude newColor and the color of the opponent\n    const excludeColorsSearch = [\n      newColor,\n      currentPlayer === Player1\n        ? this.state.currentColorP2\n        : this.state.currentColorP1,\n    ];\n    const nmh = this.findBestMoveHex(\n      excludeColorsSearch,\n      currentPlayer === Player1 ? Player2 : Player1\n    );\n    this.setState({\n      currentColorP1:\n        currentPlayer === Player1 ? newColor : this.state.currentColorP1,\n      currentColorP2:\n        currentPlayer === Player2 ? newColor : this.state.currentColorP2,\n      nextMove: nmh,\n      currentPlayer: currentPlayer === Player1 ? Player2 : Player1,\n    });\n    // }\n  };\n\n  findNewCells = (newColor, player, alreadyFound) => {\n    let foundChanges = 0;\n    const currentPlayerColor =\n      player === Player1\n        ? this.state.currentColorP1\n        : this.state.currentColorP2;\n\n    if (!currentPlayerColor || currentPlayerColor.hex !== newColor.hex) {\n      // get all connected cells with old color and change to new\n      if (player === Player1) {\n        for (let yIdx = 0; yIdx <= this.props.height; yIdx++) {\n          for (let xIdx = 0; xIdx <= this.props.width; xIdx++) {\n            const cell = this.state.cells[yIdx][xIdx];\n            // base cell, always change\n            if (yIdx === 0 && xIdx === 0) {\n              alreadyFound.push({ x: xIdx, y: yIdx });\n              continue;\n            }\n            // always change already owned\n            if (cell.owner && cell.isOwnedBy(player)) {\n              alreadyFound.push({ x: xIdx, y: yIdx });\n              continue;\n            }\n            // if connected neighbor with new color exists\n            if (\n              this.cellIsConnectedNeighbor(\n                xIdx,\n                yIdx,\n                newColor,\n                alreadyFound,\n                player\n              )\n            ) {\n              if (\n                alreadyFound.findIndex(af => af.x === xIdx && af.y === yIdx) < 0\n              ) {\n                foundChanges++;\n                alreadyFound.push({ x: xIdx, y: yIdx });\n              }\n              continue;\n            }\n          }\n        }\n      } else {\n        for (let yIdx = this.props.height; yIdx >= 0; yIdx--) {\n          for (let xIdx = this.props.width; xIdx >= 0; xIdx--) {\n            const cell = this.state.cells[yIdx][xIdx];\n            // base cell, always change\n            if (yIdx === this.props.height && xIdx === this.props.width) {\n              alreadyFound.push({ x: xIdx, y: yIdx });\n              continue;\n            }\n            // always change already owned\n            if (cell.owner && cell.isOwnedBy(player)) {\n              alreadyFound.push({ x: xIdx, y: yIdx });\n              continue;\n            }\n            // if connected neighbor with new color exists\n            if (\n              this.cellIsConnectedNeighbor(\n                xIdx,\n                yIdx,\n                newColor,\n                alreadyFound,\n                player\n              )\n            ) {\n              if (\n                alreadyFound.findIndex(af => af.x === xIdx && af.y === yIdx) < 0\n              ) {\n                foundChanges++;\n                alreadyFound.push({ x: xIdx, y: yIdx });\n              }\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (foundChanges > 0) {\n      this.findNewCells(newColor, player, alreadyFound);\n    }\n    return alreadyFound;\n  };\n\n  cellIsConnectedNeighbor = (x, y, newColor, changes, currentPlayer) => {\n    const theCell = this.state.cells[y][x];\n    if (theCell.color.hex !== newColor.hex) {\n      return false;\n    }\n    // check left neighbor within boundaries\n    if (x - 1 >= 0) {\n      const checkY = y;\n      const checkX = x - 1;\n      const checkCell = this.state.cells[checkY][checkX];\n      // console.log(`N-LEFT: Checking ${checkCell.displayName()}`);\n      if (\n        checkCell.isOwnedBy(currentPlayer) ||\n        changes.findIndex(c => c.x === checkX && c.y === checkY) >= 0\n      ) {\n        if (this.state.debug) console.log(`N-LEFT: ${theCell.displayName()}`);\n        return true;\n      }\n    }\n    // check right neighbor within boundaries\n    if (x + 1 <= this.props.width) {\n      const checkY = y;\n      const checkX = x + 1;\n      const checkCell = this.state.cells[checkY][checkX];\n      // console.log(`N-RIGHT: Checking ${checkCell.displayName()}`);\n      if (\n        checkCell.isOwnedBy(currentPlayer) ||\n        changes.findIndex(c => c.x === checkX && c.y === checkY) >= 0\n      ) {\n        if (this.state.debug) console.log(`N-RIGHT: ${theCell.displayName()}`);\n        return true;\n      }\n    }\n    // check top neighbor within boundaries\n    if (y - 1 >= 0) {\n      const checkY = y - 1;\n      const checkX = x;\n      const checkCell = this.state.cells[checkY][checkX];\n      // console.log(`N-TOP: Checking ${checkCell.displayName()}`);\n      if (\n        checkCell.isOwnedBy(currentPlayer) ||\n        changes.findIndex(c => c.x === checkX && c.y === checkY) >= 0\n      ) {\n        if (this.state.debug) console.log(`N-TOP: ${theCell.displayName()}`);\n        return true;\n      }\n    }\n    // check bottom neighbor within boundaries\n    if (y + 1 <= this.props.height) {\n      const checkY = y + 1;\n      const checkX = x;\n      const checkCell = this.state.cells[checkY][checkX];\n      // console.log(`N-BOTTOM: Checking ${checkCell.displayName()}`);\n      if (\n        checkCell.isOwnedBy(currentPlayer) ||\n        changes.findIndex(c => c.x === checkX && c.y === checkY) >= 0\n      ) {\n        if (this.state.debug) console.log(`N-BOTTOM: ${theCell.displayName()}`);\n        return true;\n      }\n    }\n    return false;\n  };\n\n  notifyChangedCells = noOfCells =>\n    toast.info(`${noOfCells} !`, {\n      position: 'bottom-center',\n      autoClose: 1000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n    });\n\n  renderWinnerGrid = () => {\n    return (\n      <div\n        style={{\n          width: `${CellSize * this.props.width}rem`,\n          height: `${CellSize * this.props.height}rem`,\n          backgroundColor: '#729CEE',\n          color: '#EEC472',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}>\n        <span style={{ fontSize: '3rem' }}>Winner: {this.state.wonName}</span>\n      </div>\n    );\n  };\n\n  renderGrid = () => {\n    const rows = [];\n    if (!this.state.cells || this.state.cells.length === 0) {\n      return rows;\n    }\n\n    // return this.state.cells ? this.state.cells.map((yc, idx) => {\n    //   return (<tr key={`y_${idx}`}>{yc.map(xc => (<td key={`x_${xc.X}`}>\n    //   <Cell\n    //     {...this.props}\n    //     cell={xc}\n    //     YMax={this.props.height}\n    //     XMax={this.props.width}\n    //     ownerDisplay={this.state.displayOwner}\n    //   />\n    // </td>)\n    //     )}</tr>);\n    // }) : [];\n\n    for (let yIdx = 0; yIdx <= this.props.height; yIdx++) {\n      const columns = [];\n      for (let xIdx = 0; xIdx <= this.props.width; xIdx++) {\n        const cell = this.state.cells[yIdx][xIdx];\n        columns.push(\n          <td key={`x_${xIdx}`}>\n            <Cell\n              {...this.props}\n              cell={cell}\n              YMax={this.props.height}\n              XMax={this.props.width}\n              ownerDisplay={this.state.displayOwner}\n            />\n          </td>\n        );\n      }\n      rows.push(<tr key={`y_${yIdx}`}>{columns}</tr>);\n    }\n    return rows;\n  };\n\n  toggleDisplayOwner = () =>\n    this.setState({ displayOwner: !this.state.displayOwner });\n\n  toggleDisplayPoss = () =>\n    this.setState({ displayPoss: !this.state.displayPoss });\n\n  render() {\n    return (\n      <Container centered>\n        <Grid centered columns={3} verticalAlign=\"middle\">\n          <Grid.Row verticalAlign=\"middle\">\n            <Grid.Column>\n              <Grid centered verticalAlign=\"middle\">\n                {!this.state.won && (\n                  <div className=\"board\">\n                    <table>\n                      <tbody>{this.renderGrid()}</tbody>\n                    </table>\n                  </div>\n                )}\n                {this.state.won && this.renderWinnerGrid()}\n              </Grid>\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Row centered columns={Colors.length + 8}>\n            {Colors.map(col => (\n              <Grid.Column key={col.name}>\n                <Button\n                  style={{\n                    backgroundColor:\n                      this.state.currentColorP1.hex === col.hex ||\n                      this.state.currentColorP2.hex === col.hex\n                        ? '#23272E'\n                        : col.hex,\n                    border:\n                      this.state.nextMove && this.state.nextMove.hex === col.hex\n                        ? '3px solid #785807'\n                        : 'none',\n                  }}\n                  onClick={() => this.changeColor(col)}\n                  diabled={\n                    this.state.currentColorP1.hex === col.hex ||\n                    this.state.currentColorP2.hex === col.hex ||\n                    this.state.won\n                  }>\n                  {this.state.displayPoss && this.state.nextMove.hex === col.hex\n                    ? this.state.nextMove.cnt\n                    : ''}\n                  &nbsp;\n                </Button>\n              </Grid.Column>\n            ))}\n          </Grid.Row>\n          <Grid.Row verticalAlign=\"middle\">\n            <Grid.Column>\n              <Grid relaxed>\n                <Grid.Row>\n                  <Grid.Column>\n                    {this.state.currentPlayer === Player1 && (\n                      <Icon name=\"chevron circle right\" />\n                    )}\n                  </Grid.Column>\n                  <Grid.Column>{Player1}</Grid.Column>\n                  <Grid.Column>{buildStat(this.state.completeP1)}</Grid.Column>\n                </Grid.Row>\n                <Grid.Row>\n                  <Grid.Column>\n                    {this.state.currentPlayer === Player2 && (\n                      <Icon name=\"chevron circle right\" />\n                    )}\n                  </Grid.Column>\n                  <Grid.Column>{Player2}</Grid.Column>\n                  <Grid.Column>{buildStat(this.state.completeP2)}</Grid.Column>\n                </Grid.Row>\n              </Grid>\n            </Grid.Column>\n            <Grid.Column>\n              <Segment>\n                <Checkbox\n                  label={'Display owner'}\n                  toggle\n                  onChange={this.toggleDisplayOwner}\n                />\n                <Checkbox\n                  label={'Display possibilities'}\n                  toggle\n                  onChange={this.toggleDisplayPoss}\n                />\n              </Segment>\n            </Grid.Column>\n            <Grid.Column>\n              <Button\n                onClick={() =>\n                  this.startGame(this.props.width, this.props.height)\n                }>\n                New Game\n              </Button>\n            </Grid.Column>\n          </Grid.Row>\n          {/* <Grid.Row verticalAlign=\"middle\">\n            <Grid.Column>\n              \n            </Grid.Column>\n          </Grid.Row> */}\n        </Grid>\n        <ToastContainer\n          position=\"bottom-center\"\n          autoClose={1000}\n          hideProgressBar={false}\n          newestOnTop\n          closeOnClick\n          rtl={false}\n          pauseOnVisibilityChange\n          draggable\n          pauseOnHover\n        />\n      </Container>\n    );\n  }\n}\n","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Board from './game/Board';\nimport { Button, Container, Grid, Header } from 'semantic-ui-react';\nimport { Colors } from './game/constants';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App-header' style={{minHeight: '100vh'}}>\n      <Header as='h2' inverted>Filler by Robin</Header>\n      <Board height={20} width={20} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}