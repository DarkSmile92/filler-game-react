{"version":3,"sources":["game/constants.js","helpers.js","game/cell.js","game/GameCell.js","game/Board.js","App.js","serviceWorker.js","index.js"],"names":["CellSize","Colors","name","hex","Player1","Player2","hexToRgbA","c","test","substring","split","length","r","join","g","b","a","Error","Cell","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","isStartingCell","state","cell","isCurrentCell","calcBorderSize","xmax","ymax","calcBorderColor","XMax","YMax","borderSize","borderColor","icon","react_default","createElement","iconStyle","fontSize","owner","Icon","style","rgbaCol","color","className","background","concat","height","width","border","textAlign","display","ownerDisplay","React","Component","GameCell","x","y","curX","curY","X","Y","changeColor","newColor","displayName","isOwnedBy","possibleOwner","buildStat","pct","Statistic","horizontal","inverted","size","Value","toFixed","Label","calcPct","partial","total","Board","randomColor","Math","floor","random","reset","emptyCol","setState","cells","currentColorP1","currentColorP2","currentPlayer","completeP1","completeP2","nextMove","cnt","won","wonName","generateGrid","startGame","yIdx","xIdx","currentColor","newCell","findBestMoveHex","excludeColors","player","colorCounts","filter","findIndex","ec","forEach","col","colChanges","alreadyOwned","push","cellIsConnectedNeighbor","changes","bestMove","reduce","prev","current","updateStatsForPlayer","ocs","findNewCells","countNewAcquired","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","coord","value","err","return","notifyChangedCells","excludeColorsSearch","nmh","useCPU","chosenColor","find","setTimeout","alreadyFound","foundChanges","currentPlayerColor","_loop","_loop2","af","_loop3","_loop4","theCell","checkY","checkX","debug","console","log","noOfCells","toast","info","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","renderWinnerGrid","backgroundColor","alignItems","justifyContent","renderGrid","rows","columns","key","cell_Cell","assign","displayOwner","toggleDisplayOwner","toggleDisplayPoss","displayPoss","toggleUseCPU","_this2","Container","centered","Grid","verticalAlign","Row","Column","map","Button","onClick","diabled","relaxed","Segment","Checkbox","label","toggle","onChange","defaultChecked","lib","newestOnTop","rtl","pauseOnVisibilityChange","App","minHeight","Header","as","Board_Board","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.970d896e.chunk.js","sourcesContent":["export const CellSize = 1.5;\nexport const Colors = [\n  { name: 'red', hex: '#C70039' },\n  { name: 'yellow', hex: '#FFC300' },\n  { name: 'white', hex: '#DEECEE' },\n  { name: 'green', hex: '#0BB02C' },\n  { name: 'cyan', hex: '#10ECF3' },\n  { name: 'blue', hex: '#103DF3' },\n  { name: 'purple', hex: '#F310D4' },\n];\nexport const Player1 = 'p1';\nexport const Player2 = 'p2';\n","export const hexToRgbA = hex => {\n  var c;\n  if (/^#([A-Fa-f0-9]{3}){1,2}$/.test(hex)) {\n    c = hex.substring(1).split('');\n    if (c.length == 3) {\n      c = [c[0], c[0], c[1], c[1], c[2], c[2]];\n    }\n    c = '0x' + c.join('');\n    return {r: (c >> 16) & 255, g: (c >> 8) & 255, b: c & 255, a: 1};\n    // return 'rgba('+[(c>>16)&255, (c>>8)&255, c&255].join(',')+',1)';\n  }\n  throw new Error('Bad Hex');\n};\n","import React from 'react';\nimport {Icon} from 'semantic-ui-react';\nimport {CellSize, Player1, Player2} from './constants';\nimport {hexToRgbA} from '../helpers';\n\nexport default class Cell extends React.Component {\n  constructor(props) {\n    super(props);\n    // props: curX, curY, color {name, hex}\n    this.state = {\n      cell: props.cell,\n      xmax: props.XMax,\n      ymax: props.YMax,\n    };\n  }\n\n  isStartingCell = () => {\n    return this.state.cell.isCurrentCell(0, 0);\n  };\n\n  calcBorderSize = () => {\n    if (this.state.cell.isCurrentCell(0, 0) || this.state.cell.isCurrentCell(this.state.xmax, this.state.ymax)) {\n      return '3px';\n    }\n    return '1px';\n  };\n\n  calcBorderColor = () => {\n    if (this.state.cell.isCurrentCell(0, 0)) {\n      return '#C0A3B5';\n    }\n    if (this.state.cell.isCurrentCell(this.state.xmax, this.state.ymax)) {\n      return '#A3C0AE';\n    }\n    return 'grey';\n  };\n\n  render() {\n    const borderSize = this.calcBorderSize();\n    const borderColor = this.calcBorderColor();\n    let icon = <span />;\n    const iconStyle = {fontSize: '50%'};\n\n    if (this.state.cell) {\n      switch (this.state.cell.owner) {\n        case Player1:\n          icon = <Icon name=\"fly\" style={iconStyle} />;\n          break;\n        case Player2:\n          icon = <Icon name=\"sun\" style={iconStyle} />;\n          break;\n      }\n    }\n\n    const rgbaCol = hexToRgbA(this.state.cell.color.hex);\n\n    return (\n      <div\n        className=\"cell\"\n        style={{\n          // backgroundColor: this.state.cell.color.hex,\n          background: `linear-gradient(141deg, #2c3340 0%, rgba(${rgbaCol.r}, ${rgbaCol.g}, ${rgbaCol.b}, 0.6) 51%, ${this.state.cell.color.hex} 75%)`,\n          height: `${CellSize}rem`,\n          width: `${CellSize}rem`,\n          border: `${borderSize} groove ${borderColor}`,\n          textAlign: 'center',\n          display: 'flex',\n        }}>\n        {this.props.ownerDisplay && icon}\n      </div>\n    );\n  }\n}\n","export default class GameCell {\n  constructor(color, x, y, owner) {\n    this.color = color;\n    this.X = x;\n    this.Y = y;\n    this.owner = owner;\n  }\n\n  isCurrentCell = (curX, curY) => {\n    return this.X === curX && this.Y === curY;\n  };\n\n  changeColor = newColor => {\n    if (this.color.hex !== newColor.hex) {\n      this.color = newColor;\n    }\n  };\n\n  displayName = () => {\n    return `{X:${this.X}, Y:${this.Y}, Owner: ${this.owner}, Color: ${this.color.name}}`;\n  };\n\n  isOwnedBy = possibleOwner => {\n    return this.owner && this.owner === possibleOwner;\n  }\n}\n","import React from 'react';\nimport {Button, Container, Checkbox, Icon, Grid, Statistic, Segment} from 'semantic-ui-react';\nimport {ToastContainer, toast} from 'react-toastify';\nimport {CellSize, Colors, Player1, Player2} from './constants';\nimport Cell from './cell';\nimport GameCell from './GameCell';\nimport {hexToRgbA} from '../helpers';\n\nconst buildStat = pct => (\n  <Statistic horizontal inverted size=\"mini\">\n    <Statistic.Value>{pct.toFixed(2)}</Statistic.Value>\n    <Statistic.Label>%</Statistic.Label>\n  </Statistic>\n);\n\nconst calcPct = (partial, total) => (partial * 100) / total;\n\nexport default class Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      height: props.height * CellSize,\n      width: props.width * CellSize,\n      currentColorP1: {name: 'empty', hex: '0'},\n      currentColorP2: {name: 'empty', hex: '0'},\n      currentPlayer: Player1,\n      completeP1: 0,\n      completeP2: 0,\n      nextMove: {hex: '0', cnt: 0},\n      won: false,\n      wonName: '',\n      displayOwner: false,\n      displayPoss: false,\n      useCPU: true,\n      debug: false,\n    };\n  }\n\n  componentDidMount() {\n    this.startGame(this.props.width, this.props.height);\n  }\n\n  randomColor = () => {\n    const randColor = Colors[Math.floor(Math.random() * Colors.length)];\n    return randColor;\n  };\n\n  reset = (width, height) => {\n    const emptyCol = {name: 'empty', hex: '0'};\n    this.setState(\n      {\n        cells: [],\n        currentColorP1: emptyCol,\n        currentColorP2: emptyCol,\n        currentPlayer: Player1,\n        completeP1: 0,\n        completeP2: 0,\n        nextMove: {hex: '0', cnt: 0},\n        won: false,\n        wonName: '',\n      },\n      () => this.generateGrid(width, height)\n    );\n  };\n\n  startGame = (width, height) => {\n    this.reset(width, height);\n  };\n\n  generateGrid = (width, height) => {\n    for (let yIdx = 0; yIdx <= height; yIdx++) {\n      for (let xIdx = 0; xIdx <= width; xIdx++) {\n        if (typeof this.state.cells[yIdx] === 'undefined') {\n          this.state.cells[yIdx] = [];\n        }\n        const color = this.randomColor();\n        if (yIdx === 0 && xIdx === 0) {\n          this.setState({currentColor: color, currentColorP1: color});\n        }\n        if (yIdx === height && xIdx === width) {\n          while (color.hex === this.state.currentColorP1) {\n            color = this.randomColor();\n          }\n          this.setState({currentColorP2: color});\n        }\n        const newCell = new GameCell(\n          color,\n          xIdx,\n          yIdx,\n          yIdx === 0 && xIdx === 0 ? Player1 : yIdx === height && xIdx === width ? Player2 : ''\n        );\n        this.state.cells[yIdx][xIdx] = newCell;\n      }\n    }\n  };\n\n  findBestMoveHex = (excludeColors, player) => {\n    const colorCounts = [];\n    Colors.filter(c => excludeColors.findIndex(ec => ec.hex === c.hex) < 0).forEach(col => {\n      const colChanges = [];\n      const alreadyOwned = [];\n      // fill already owned first\n      for (let yIdx = 0; yIdx <= this.props.height; yIdx++) {\n        for (let xIdx = 0; xIdx <= this.props.width; xIdx++) {\n          if (this.state.cells[yIdx][xIdx].isOwnedBy(player)) {\n            alreadyOwned.push({x: xIdx, y: yIdx});\n          }\n        }\n      }\n      // find new cells to acquire\n      // p1 == start 0, p2 == start end\n      // ToDo: Improve this!\n      if (player === Player1) {\n        for (let yIdx = 0; yIdx <= this.props.height; yIdx++) {\n          for (let xIdx = 0; xIdx <= this.props.width; xIdx++) {\n            if (this.cellIsConnectedNeighbor(xIdx, yIdx, col, [...alreadyOwned, ...colChanges], player)) {\n              colChanges.push({x: xIdx, y: yIdx});\n            }\n          }\n        }\n      } else {\n        for (let yIdx = this.props.height; yIdx >= 0; yIdx--) {\n          for (let xIdx = this.props.width; xIdx >= 0; xIdx--) {\n            if (this.cellIsConnectedNeighbor(xIdx, yIdx, col, [...alreadyOwned, ...colChanges], player)) {\n              colChanges.push({x: xIdx, y: yIdx});\n            }\n          }\n        }\n      }\n\n      colorCounts.push({\n        color: col.hex,\n        changes: colChanges.length,\n      });\n    });\n    const bestMove = colorCounts.reduce((prev, current) => {\n      return prev.changes > current.changes ? prev : current;\n    });\n    return bestMove ? {hex: bestMove.color, cnt: bestMove.changes} : {hex: '0', cnt: 0};\n  };\n\n  updateStatsForPlayer = player => {\n    let ocs = 0;\n    for (let yIdx = 0; yIdx <= this.props.height; yIdx++) {\n      for (let xIdx = 0; xIdx <= this.props.width; xIdx++) {\n        if (this.state.cells[yIdx][xIdx].isOwnedBy(player)) {\n          ocs++;\n        }\n      }\n    }\n    const pct = calcPct(ocs, this.props.height * this.props.width);\n\n    this.setState({\n      completeP1: player === Player1 ? pct : this.state.completeP1,\n      completeP2: player === Player2 ? pct : this.state.completeP2,\n      won: pct >= 50 ? true : false,\n      wonName: pct >= 50 ? player : '',\n    });\n  };\n\n  changeColor = newColor => {\n    const currentPlayer = this.state.currentPlayer;\n\n    const changes = this.findNewCells(newColor, currentPlayer, []);\n    let countNewAcquired = 0;\n    for (const coord of changes) {\n      const cell = this.state.cells[coord.y][coord.x];\n      if (!cell.isOwnedBy(currentPlayer)) {\n        countNewAcquired++;\n      }\n      cell.color = newColor;\n      cell.owner = currentPlayer;\n    }\n    this.updateStatsForPlayer(currentPlayer);\n    this.notifyChangedCells(countNewAcquired);\n    // exclude newColor and the color of the opponent\n    const excludeColorsSearch = [\n      newColor,\n      currentPlayer === Player1 ? this.state.currentColorP2 : this.state.currentColorP1,\n    ];\n    const nmh = this.findBestMoveHex(excludeColorsSearch, currentPlayer === Player1 ? Player2 : Player1);\n    this.setState(\n      {\n        currentColorP1: currentPlayer === Player1 ? newColor : this.state.currentColorP1,\n        currentColorP2: currentPlayer === Player2 ? newColor : this.state.currentColorP2,\n        nextMove: nmh,\n        currentPlayer: currentPlayer === Player1 ? Player2 : Player1,\n      },\n      () => {\n        // if last player was human let CPU make a move\n        if (this.state.useCPU && this.state.currentPlayer === Player2) {\n          const chosenColor = Colors.find(c => c.hex === nmh.hex);\n          setTimeout(this.changeColor, 1200, chosenColor);\n        }\n      }\n    );\n    // }\n  };\n\n  findNewCells = (newColor, player, alreadyFound) => {\n    let foundChanges = 0;\n    const currentPlayerColor = player === Player1 ? this.state.currentColorP1 : this.state.currentColorP2;\n\n    if (!currentPlayerColor || currentPlayerColor.hex !== newColor.hex) {\n      // get all connected cells with old color and change to new\n      if (player === Player1) {\n        for (let yIdx = 0; yIdx <= this.props.height; yIdx++) {\n          for (let xIdx = 0; xIdx <= this.props.width; xIdx++) {\n            const cell = this.state.cells[yIdx][xIdx];\n            // base cell, always change\n            if (yIdx === 0 && xIdx === 0) {\n              alreadyFound.push({x: xIdx, y: yIdx});\n              continue;\n            }\n            // always change already owned\n            if (cell.owner && cell.isOwnedBy(player)) {\n              alreadyFound.push({x: xIdx, y: yIdx});\n              continue;\n            }\n            // if connected neighbor with new color exists\n            if (this.cellIsConnectedNeighbor(xIdx, yIdx, newColor, alreadyFound, player)) {\n              if (alreadyFound.findIndex(af => af.x === xIdx && af.y === yIdx) < 0) {\n                foundChanges++;\n                alreadyFound.push({x: xIdx, y: yIdx});\n              }\n              continue;\n            }\n          }\n        }\n      } else {\n        for (let yIdx = this.props.height; yIdx >= 0; yIdx--) {\n          for (let xIdx = this.props.width; xIdx >= 0; xIdx--) {\n            const cell = this.state.cells[yIdx][xIdx];\n            // base cell, always change\n            if (yIdx === this.props.height && xIdx === this.props.width) {\n              alreadyFound.push({x: xIdx, y: yIdx});\n              continue;\n            }\n            // always change already owned\n            if (cell.owner && cell.isOwnedBy(player)) {\n              alreadyFound.push({x: xIdx, y: yIdx});\n              continue;\n            }\n            // if connected neighbor with new color exists\n            if (this.cellIsConnectedNeighbor(xIdx, yIdx, newColor, alreadyFound, player)) {\n              if (alreadyFound.findIndex(af => af.x === xIdx && af.y === yIdx) < 0) {\n                foundChanges++;\n                alreadyFound.push({x: xIdx, y: yIdx});\n              }\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (foundChanges > 0) {\n      this.findNewCells(newColor, player, alreadyFound);\n    }\n    return alreadyFound;\n  };\n\n  cellIsConnectedNeighbor = (x, y, newColor, changes, currentPlayer) => {\n    const theCell = this.state.cells[y][x];\n    if (theCell.color.hex !== newColor.hex) {\n      return false;\n    }\n    // check left neighbor within boundaries\n    if (x - 1 >= 0) {\n      const checkY = y;\n      const checkX = x - 1;\n      const checkCell = this.state.cells[checkY][checkX];\n      // console.log(`N-LEFT: Checking ${checkCell.displayName()}`);\n      if (checkCell.isOwnedBy(currentPlayer) || changes.findIndex(c => c.x === checkX && c.y === checkY) >= 0) {\n        if (this.state.debug) console.log(`N-LEFT: ${theCell.displayName()}`);\n        return true;\n      }\n    }\n    // check right neighbor within boundaries\n    if (x + 1 <= this.props.width) {\n      const checkY = y;\n      const checkX = x + 1;\n      const checkCell = this.state.cells[checkY][checkX];\n      // console.log(`N-RIGHT: Checking ${checkCell.displayName()}`);\n      if (checkCell.isOwnedBy(currentPlayer) || changes.findIndex(c => c.x === checkX && c.y === checkY) >= 0) {\n        if (this.state.debug) console.log(`N-RIGHT: ${theCell.displayName()}`);\n        return true;\n      }\n    }\n    // check top neighbor within boundaries\n    if (y - 1 >= 0) {\n      const checkY = y - 1;\n      const checkX = x;\n      const checkCell = this.state.cells[checkY][checkX];\n      // console.log(`N-TOP: Checking ${checkCell.displayName()}`);\n      if (checkCell.isOwnedBy(currentPlayer) || changes.findIndex(c => c.x === checkX && c.y === checkY) >= 0) {\n        if (this.state.debug) console.log(`N-TOP: ${theCell.displayName()}`);\n        return true;\n      }\n    }\n    // check bottom neighbor within boundaries\n    if (y + 1 <= this.props.height) {\n      const checkY = y + 1;\n      const checkX = x;\n      const checkCell = this.state.cells[checkY][checkX];\n      // console.log(`N-BOTTOM: Checking ${checkCell.displayName()}`);\n      if (checkCell.isOwnedBy(currentPlayer) || changes.findIndex(c => c.x === checkX && c.y === checkY) >= 0) {\n        if (this.state.debug) console.log(`N-BOTTOM: ${theCell.displayName()}`);\n        return true;\n      }\n    }\n    return false;\n  };\n\n  notifyChangedCells = noOfCells =>\n    toast.info(`${noOfCells} !`, {\n      position: 'bottom-center',\n      autoClose: 1000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n    });\n\n  renderWinnerGrid = () => {\n    return (\n      <div\n        style={{\n          width: `${CellSize * this.props.width}rem`,\n          height: `${CellSize * this.props.height}rem`,\n          backgroundColor: '#729CEE',\n          color: '#EEC472',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}>\n        <span style={{fontSize: '3rem'}}>Winner: {this.state.wonName}</span>\n      </div>\n    );\n  };\n\n  renderGrid = () => {\n    const rows = [];\n    if (!this.state.cells || this.state.cells.length === 0) {\n      return rows;\n    }\n\n    for (let yIdx = 0; yIdx <= this.props.height; yIdx++) {\n      const columns = [];\n      for (let xIdx = 0; xIdx <= this.props.width; xIdx++) {\n        const cell = this.state.cells[yIdx][xIdx];\n        columns.push(\n          <td key={`x_${xIdx}`}>\n            <Cell\n              {...this.props}\n              cell={cell}\n              YMax={this.props.height}\n              XMax={this.props.width}\n              ownerDisplay={this.state.displayOwner}\n            />\n          </td>\n        );\n      }\n      rows.push(<tr key={`y_${yIdx}`}>{columns}</tr>);\n    }\n    return rows;\n  };\n\n  toggleDisplayOwner = () => this.setState({displayOwner: !this.state.displayOwner});\n\n  toggleDisplayPoss = () => this.setState({displayPoss: !this.state.displayPoss});\n\n  toggleUseCPU = () => this.setState({useCPU: !this.state.useCPU});\n\n  render() {\n    return (\n      <Container centered>\n        <Grid centered columns={3} verticalAlign=\"middle\">\n          <Grid.Row verticalAlign=\"middle\">\n            <Grid.Column>\n              <Grid centered verticalAlign=\"middle\">\n                {!this.state.won && (\n                  <div className=\"board\">\n                    <table>\n                      <tbody>{this.renderGrid()}</tbody>\n                    </table>\n                  </div>\n                )}\n                {this.state.won && this.renderWinnerGrid()}\n              </Grid>\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Row centered columns={Colors.length + 8}>\n            {Colors.map(col => (\n              <Grid.Column key={col.name}>\n                <Button\n                  style={{\n                    // backgroundColor:\n                    //   this.state.currentColorP1.hex === col.hex || this.state.currentColorP2.hex === col.hex\n                    //     ? '#23272E'\n                    //     : col.hex,\n                    background:\n                      this.state.currentColorP1.hex === col.hex || this.state.currentColorP2.hex === col.hex\n                        ? '#23272E'\n                        : `linear-gradient(141deg, #2c3340 0%, rgba(${hexToRgbA(col.hex).r}, ${hexToRgbA(col.hex).g}, ${hexToRgbA(col.hex).b}, 0.6) 51%, ${col.hex} 75%)`,\n                    border: this.state.nextMove && this.state.nextMove.hex === col.hex ? '3px solid #785807' : 'none',\n                  }}\n                  onClick={() => this.changeColor(col)}\n                  diabled={\n                    this.state.currentColorP1.hex === col.hex ||\n                    this.state.currentColorP2.hex === col.hex ||\n                    this.state.won\n                  }>\n                  {this.state.displayPoss && this.state.nextMove.hex === col.hex ? this.state.nextMove.cnt : ''}\n                  &nbsp;\n                </Button>\n              </Grid.Column>\n            ))}\n          </Grid.Row>\n          <Grid.Row verticalAlign=\"middle\">\n            <Grid.Column>\n              <Grid relaxed>\n                <Grid.Row>\n                  <Grid.Column>\n                    {this.state.currentPlayer === Player1 && <Icon name=\"chevron circle right\" />}\n                  </Grid.Column>\n                  <Grid.Column>{Player1}</Grid.Column>\n                  <Grid.Column>{buildStat(this.state.completeP1)}</Grid.Column>\n                </Grid.Row>\n                <Grid.Row>\n                  <Grid.Column>\n                    {this.state.currentPlayer === Player2 && <Icon name=\"chevron circle right\" />}\n                  </Grid.Column>\n                  <Grid.Column>{this.state.useCPU ? 'cp' : Player2}</Grid.Column>\n                  <Grid.Column>{buildStat(this.state.completeP2)}</Grid.Column>\n                </Grid.Row>\n              </Grid>\n            </Grid.Column>\n            <Grid.Column>\n              <Segment>\n                <Checkbox label={'Display owner'} toggle onChange={this.toggleDisplayOwner} />\n                <Checkbox label={'Display possibilities'} toggle onChange={this.toggleDisplayPoss} />\n                <Checkbox label={'Play against CPU'} toggle onChange={this.toggleUseCPU} defaultChecked />\n              </Segment>\n            </Grid.Column>\n            <Grid.Column>\n              <Button onClick={() => this.startGame(this.props.width, this.props.height)}>New Game</Button>\n            </Grid.Column>\n          </Grid.Row>\n          {/* <Grid.Row verticalAlign=\"middle\">\n            <Grid.Column>\n              \n            </Grid.Column>\n          </Grid.Row> */}\n        </Grid>\n        <ToastContainer\n          position=\"bottom-center\"\n          autoClose={1000}\n          hideProgressBar={false}\n          newestOnTop\n          closeOnClick\n          rtl={false}\n          pauseOnVisibilityChange\n          draggable\n          pauseOnHover\n        />\n      </Container>\n    );\n  }\n}\n","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Board from './game/Board';\nimport { Button, Container, Grid, Header } from 'semantic-ui-react';\nimport { Colors } from './game/constants';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App-header' style={{minHeight: '100vh'}}>\n      <Header as='h2' inverted>Filler by Robin</Header>\n      <Board height={20} width={20} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}